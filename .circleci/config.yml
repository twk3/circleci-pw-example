version: 2.1

parameters:
  lastFailed:
    type: enum
    default: 'onretry'
    enum:
      - 'onretry'
      - 'yes'
      - 'no'

jobs:
  shard-run-test:
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.0
    parallelism: 3
    environment:
      PLAYWRIGHT_JUNIT_OUTPUT_NAME: results.xml
      CURRENTS_DISCOVERY_LAST_RUN: test-results/.last-run.json
    steps:
      - checkout
      - run: npm ci
      - run: npx playwright install
      - run:
          name: Run tests
          command: |
            if [ "${CIRCLE_WORKFLOW_WORKSPACE_ID}" != "${CIRCLE_WORKSPACE_ID}" ]; then export IS_RETRY="true"; fi
            SHARD="$((${CIRCLE_NODE_INDEX}+1))/$CIRCLE_NODE_TOTAL"
            if [ "<<pipeline.parameters.lastFailed>>" == "yes" ] || ([ "<<pipeline.parameters.lastFailed>>" == "onretry" ] && [ -n "${IS_RETRY}" ]); then
              if [ -n "${IS_RETRY}" ]; then
                SHARD="1/1"
                EXTRA_CURRENTS_CLI_FLAGS="--tag shard:$CIRCLE_WORKFLOW_WORKSPACE_ID"
                export CURRENTS_DISCOVERY_LAST_RUN=.currents-last-run.json
              fi
              # npx currents get-run --failed --project=example  --branch=$CI_COMMIT_REF_NAME --provider="pw" $EXTRA_CURRENTS_CLI_FLAGS > $CURRENTS_DISCOVERY_LAST_RUN
              export EXTRA_PW_FLAGS="--last-failed"
            fi
            npx pwc --key $CURRENTS_RECORD_KEY --project-id 0biWxT  --tag "shard:$CIRCLE_WORKFLOW_WORKSPACE_ID" --ci-build-id=shard-$CIRCLE_WORKFLOW_ID --reporter=junit --shard=$SHARD $EXTRA_PW_FLAGS
      - store_test_results:
          path: results.xml

  circle-run-test:
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.0
    parallelism: 3
    environment:
      PLAYWRIGHT_JUNIT_OUTPUT_NAME: results.xml
    steps:
      - checkout
      - run: npm ci
      - run: npx playwright install
      - run:
          name: Run tests
          command: SHARD="$((${CIRCLE_NODE_INDEX}+1))"; TESTFILES=$(circleci tests glob "tests/*.spec.ts"); echo "$TESTFILES" | circleci tests run --command="xargs npx pwc --key $CURRENTS_RECORD_KEY --project-id 0biWxT --ci-build-id=circle-$CIRCLE_WORKFLOW_ID --reporter=junit"
      - store_test_results:
          path: results.xml

  or8n-run-test:
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.0
    parallelism: 3
    steps:
      - checkout
      - run: npm ci
      - run: npx playwright install
      - run:
          name: Run tests
          command: |
            if [ "${CIRCLE_WORKFLOW_WORKSPACE_ID}" != "${CIRCLE_WORKSPACE_ID}" ]; then export IS_RETRY="true"; fi
            if [ "<<pipeline.parameters.lastFailed>>" == "yes" ] || ([ "<<pipeline.parameters.lastFailed>>" == "onretry" ] && [ -n "${IS_RETRY}" ]); then
              if [ -n "${IS_RETRY}" ]; then
                EXTRA_CURRENTS_CLI_FLAGS="--tag or8n:$CIRCLE_WORKFLOW_WORKSPACE_ID"
              fi
              # npx currents get-run --failed --project=example  --branch=$CI_COMMIT_REF_NAME --provider="pw" > test-results/.last-run.json
              export EXTRA_PW_FLAGS="--last-failed"
            fi
            npx pwc-p --key $CURRENTS_RECORD_KEY --project-id 0biWxT --tag "or8n:$CIRCLE_WORKFLOW_WORKSPACE_ID" --reporter=junit --ci-build-id=or8n-$CIRCLE_WORKFLOW_ID $EXTRA_PW_FLAGS

# Invoke jobs via workflows
workflows:
  run-test-workflow:
    jobs:
      - shard-run-test:
          context: currents
      - circle-run-test:
          context: currents
      - or8n-run-test:
          context: currents
